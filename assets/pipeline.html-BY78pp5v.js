import{_ as s,c as a,b as p,o as t}from"./app--XYqrjBE.js";const e={};function c(i,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="使用-pipeline-减少-rtt-提升吞吐量" tabindex="-1"><a class="header-anchor" href="#使用-pipeline-减少-rtt-提升吞吐量"><span>使用 pipeline 减少 RTT 提升吞吐量</span></a></h1><p>Redis 中有很多命令不支持批量操作，需要多次发送命令。 多次发送命令就会有多次网络请求。客户端与服务端网络延迟越大。网络请求消耗的时间就越长。</p><p>使用 pipeline 命令可以一次在网络请求执行多条命令。该指令将多条命令在内存中排队，然后一次将它们发送到 Redis 服务端。这样性能可以提高 50% ~ 300%。</p><p>事实上 pipeline 不仅仅可以减少客户端的等待时间，它还可以极大地提高了 Redis 服务器中每秒可以执行的操作数量。这是因为，Redis 命令都会执行系统调用 read 和 write 方法，这意味着从用户态到内核态。上下文切换会带来巨大的速度损失。</p><p>当使用 pipeline 时，多个命令只会涉及到一次系统调用，大大减少了系统的上下文切换。</p><p>使用 JavaScript ioredis 为例。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 开启 pipeline</span></span>
<span class="line"><span class="token keyword">const</span> pipeline <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pipeline<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pipeline<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&quot;cc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pipeline<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 无论如何 err 是 null, result 返回一个数组。</span></span>
<span class="line">  <span class="token comment">// 该数组根据执行命令顺序返回错误或结果</span></span>
<span class="line">  <span class="token comment">// 看出 pipeline 中间出错不会终止，而是继续执行下一条命令</span></span>
<span class="line">  <span class="token comment">// result 数组里面是元组 [err, result]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 也提供了链式调用</span></span>
<span class="line">redis</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&quot;cc&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// \`exec\` 也可以返回 Promise</span></span>
<span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// result === [[null, &#39;OK&#39;], [null, &#39;bar&#39;]]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const l=s(e,[["render",c],["__file","pipeline.html.vue"]]),u=JSON.parse('{"path":"/redis/performance/pipeline.html","title":"使用 pipeline 减少 RTT 提升吞吐量","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1696726220000,"contributors":[{"name":"wsafight","email":"984292420@qq.com","commits":1}]},"filePathRelative":"redis/performance/pipeline.md"}');export{l as comp,u as data};
