import{_ as a,c as n,b as s,o as l}from"./app--XYqrjBE.js";const i={};function p(t,e){return l(),n("div",null,e[0]||(e[0]=[s(`<h1 id="聊聊存储引擎的实现要素" tabindex="-1"><a class="header-anchor" href="#聊聊存储引擎的实现要素"><span>聊聊存储引擎的实现要素</span></a></h1><p>众所周知，MySQL 的 InnoDB 存储引擎使用了 B+ 树作为索引实现，那么为什么不使用其他的数据结构呢？数组、链表或者哈希表。实现存储引擎究竟需要什么条件呢？</p><p>我们现在先以存储最简单的数据为例，这里的数据类似于 json 对象。有 key 和 value。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;0&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最简单的存储引擎必须实现以下三个方法：</p><ul><li>read: (key: number) =&gt; value 查找 key 并返回 value</li><li>write: (key: number, value) =&gt; void 查找并插入 key 以及 value</li><li>scan: (begin: number, end: number) =&gt; value[] 查找返回 key 范围内数据</li></ul><h2 id="简单数据结构" tabindex="-1"><a class="header-anchor" href="#简单数据结构"><span>简单数据结构</span></a></h2><p>对于开发项目来说，能使用最简单的数据结构完成项目是非常棒的，这意味着更少的 bug 和更少的时间。</p><h3 id="有序数组" tabindex="-1"><a class="header-anchor" href="#有序数组"><span>有序数组</span></a></h3><p>如果当前有序数组的位置和存储的 key 可以一一对应的话，也就是数组 index 对应 key（没有对应也就是稀疏数组），我们的 read 和 write 方法的时间复杂度会是 O(1)，scan 方法也是 O(1)。但数据量稍大就扛不住了。</p><p>退而求其次，不存在位置对应主键的情况下，有序数组紧密存储，这样可以通过二分查找，read 和 scan 方法的时间复杂度为 O(log2n)。但 write 方法成本会高到离谱。</p><p>综上所属，有序数组是在数据量少的情况下可以用来做存储引擎的。</p><h3 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h3><p>不考虑空间是不可能的，那么直接舍弃 scan 方法呢？在某些业务场景下是可以不使用 scan 方法的。</p><p>哈希表使用一对多的组织方式来实现 read 和 write。先对 key 进行 hash 运算然后再寻址，性能基本接近于 O(1)。</p><p>综上所属，哈希表在不考虑 scan 方法的情况下是可以用来做存储引擎的。</p><h3 id="二叉平衡树" tabindex="-1"><a class="header-anchor" href="#二叉平衡树"><span>二叉平衡树</span></a></h3><p>二叉平衡树相对 hash 和有序数据来说是一个折衷方案。该数据结构是通过链表实现的，所以不需要大块内存。它的 read 和 write 都是 O(log2n)，虽然 scan 遍历慢的难以忍受，但是它能够实现这三个方法了。</p><p>综上所属，二叉平衡树是可以用来做存储引擎的，但有一定的局限性。</p><h2 id="要素分析" tabindex="-1"><a class="header-anchor" href="#要素分析"><span>要素分析</span></a></h2><p>在分析上面几种数据结构后，我们不难得出结论。</p><ul><li>有序性是实现 scan 方法的前提条件</li><li>局部性是提升 scan/read 方法性能的必要条件</li></ul><p>这里我们提到了局部性，那么局部性究竟是什么呢？</p><p>通常来说，良好的计算机程序需要良好的局部性，局部性主要有：</p><ul><li>时间局部性 ：指的是同一个内存位置，从时间维度来看，它能够在较短时间内被多次引用</li><li>空间局部性 ：指的是同一个内存位置，从空间维度来看，它附近的内存位置能够被引用</li></ul><p>仔细分析一下，scan 方法和空间局部性有关。如果使用平衡二叉树来作为查询的数据结构。scan 的性能是非常差的，但是使用有序数组来作为数据结构 scan 可以直接遍历获取两者之间的数据，性能非常高。</p><p>同时，局部性也和 read 性能有很大关系。使用二分法来查询数据。局部性较低的情况下，read 需要多次从磁盘加载数据。如果局部性高，直接一次加载数据即可。</p><p>那是不是局部性越高越好呢？不是这样的。一方面局部性高会占用较高的内存。另一方面，局部性过高会导致 write 方法变慢，因为局部性高了，write 方法需要移动的数据也就多了。</p><p>平衡二叉树是唯一能在现实世界中实现 3 个方法的数据结构，局部性是提升 scan 方法性能的必要条件。那么把两者结合呢？把平衡二叉树的结点构造成一个个有序数组，这样就可以得到两个方案的优点了。</p><ul><li>对于有序数组来说，通过拆分数组，使得在 write 方法的成本大大减少</li><li>对于平衡二叉树来说，通过节点替换，大大增加了局部性，让 scan 方法性能成本大大减少</li></ul><p>事实上，只要能够低成本且高效的维持数据有序的数据结构都可以作为存储引擎。无论是 B 树, B+ 树或者 跳表。同时每个数据结构都有其对应的侧重点。只要抓住这几个点，就不难分析出为什么当前存储引擎使用该数据结构作为索引了。</p>`,31)]))}const c=a(i,[["render",p],["__file","why-b-plus-tree.html.vue"]]),o=JSON.parse('{"path":"/mysql/performance/why-b-plus-tree.html","title":"聊聊存储引擎的实现要素","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简单数据结构","slug":"简单数据结构","link":"#简单数据结构","children":[{"level":3,"title":"有序数组","slug":"有序数组","link":"#有序数组","children":[]},{"level":3,"title":"哈希表","slug":"哈希表","link":"#哈希表","children":[]},{"level":3,"title":"二叉平衡树","slug":"二叉平衡树","link":"#二叉平衡树","children":[]}]},{"level":2,"title":"要素分析","slug":"要素分析","link":"#要素分析","children":[]}],"git":{"updatedTime":1691424102000,"contributors":[{"name":"wsafight","email":"984292420@qq.com","commits":1}]},"filePathRelative":"mysql/performance/why-b-plus-tree.md"}');export{c as comp,o as data};
