import{_ as l,c as a,b as i,o as t}from"./app--XYqrjBE.js";const r="/server-study-notes/assets/architecture-DB1JJP-w.png",s={};function c(n,e){return t(),a("div",null,e[0]||(e[0]=[i('<h1 id="mysql-架构" tabindex="-1"><a class="header-anchor" href="#mysql-架构"><span>MySQL 架构</span></a></h1><p><img src="'+r+'" alt="architecture"></p><p>注： MySQL 8.0 后将 query cache 去除了</p><h2 id="查询执行流程" tabindex="-1"><a class="header-anchor" href="#查询执行流程"><span>查询执行流程</span></a></h2><h3 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h3><ul><li>客户端发起一条Query请求，监听客户端的‘连接管理模块’接收请求</li><li>将请求转发到‘连接进/线程模块’</li><li>调用‘用户模块’来进行授权检查</li><li>通过检查后，‘连接进/线程模块’从‘线程连接池’中取出空闲的被缓存的连接线程和客户端请求对接，如果失败则创建一个新的连接请求</li></ul><h3 id="处理" tabindex="-1"><a class="header-anchor" href="#处理"><span>处理</span></a></h3><ul><li>先查询缓存，检查 Query 语句是否完全匹配，</li><li>查询缓存失败则转交给‘命令解析器’</li><li>再转交给对应的模块处理</li><li>如果是SELECT查询还会经由‘查询优化器’做大量的优化，生成执行计划</li><li>模块收到请求后，通过‘访问控制模块’检查所连接的用户是否有访问目标表和目标字段的权限</li><li>有则调用‘表管理模块’，先是查看 table cache 中是否存在，有则直接对应的表和获取锁，否则重新打开表文件</li><li>根据表的 meta 数据，获取表的存储引擎类型等信息，通过接口调用对应的存储引擎处理</li><li>述过程中产生数据变化的时候，若打开日志功能，则会记录到相应二进制日志文件中</li></ul><h3 id="结果" tabindex="-1"><a class="header-anchor" href="#结果"><span>结果</span></a></h3><ul><li>Query 请求完成后，将结果集返回给‘连接进/线程模块’</li><li>返回的也可以是相应的状态标识，如成功或失败等</li><li>‘连接进/线程模块’进行后续的清理工作，并继续等待请求或断开与客户端的连接</li></ul>',10)]))}const d=l(s,[["render",c],["__file","architecture.html.vue"]]),o=JSON.parse('{"path":"/mysql/performance/architecture.html","title":"MySQL 架构","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"查询执行流程","slug":"查询执行流程","link":"#查询执行流程","children":[{"level":3,"title":"连接","slug":"连接","link":"#连接","children":[]},{"level":3,"title":"处理","slug":"处理","link":"#处理","children":[]},{"level":3,"title":"结果","slug":"结果","link":"#结果","children":[]}]}],"git":{"updatedTime":1711503298000,"contributors":[{"name":"wsafight","email":"984292420@qq.com","commits":2}]},"filePathRelative":"mysql/performance/architecture.md"}');export{d as comp,o as data};
