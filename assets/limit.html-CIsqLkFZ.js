import{_ as n,c as a,b as s,o as i}from"./app--XYqrjBE.js";const l={};function t(r,e){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="优化深度分页" tabindex="-1"><a class="header-anchor" href="#优化深度分页"><span>优化深度分页</span></a></h1><p>如果目前是移动端的话，建议使用 <a href="https://segmentfault.com/a/1190000022549636" target="_blank" rel="noopener noreferrer">移动端列表查询最佳实践</a>。</p><p>深度查询的问题在于开发者使用 limit 10000,10 时候，是先查询 10010 条记录后抛弃前 10000 条数据，结果最终返回给用户。</p><p>如果能在体验上提升查询功能，优先提升查询功能。让用户无需深度查询。</p><p>如果可以使用其他技术，则使用 ES 来处理查询。</p><p>如果依次查询下一页或在 PC 端也采取下拉加载的方式。通过记住上一次的查询条件，也可以大大优化查询。可以参考 <a href="https://segmentfault.com/a/1190000022549636" target="_blank" rel="noopener noreferrer">移动端列表查询最佳实践</a>。同时也要考虑在前端使用虚拟列表以避免卡顿。</p><p>上述条件都走不通的情况下，《高性能的 MYSQL》介绍了一种优化方法：</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT id, desc FROM book ORDER BY title LIMIT 50, 5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>优化为</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">SELECT id, desc FROM book</span>
<span class="line">  INNER JOIN (</span>
<span class="line">    SELECT id FROM book</span>
<span class="line">    ORDER BY</span>
<span class="line">      title</span>
<span class="line">    limit</span>
<span class="line">      50, 5</span>
<span class="line">  ) AS lim USING (id)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法被称为“延迟连接”，它允许服务器再不访问行的情况下检查索引中尽可能少的数据（覆盖索引）。一旦找到所需的行，则让他们与整个表联接，从当前行再进行检索。</p><p>同时，代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p>`,12)]))}const d=n(l,[["render",t],["__file","limit.html.vue"]]),c=JSON.parse('{"path":"/mysql/performance/limit.html","title":"优化深度分页","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1717043518000,"contributors":[{"name":"jump-and-jump","email":"984292420@qq.com","commits":1},{"name":"wsafight","email":"984292420@qq.com","commits":1}]},"filePathRelative":"mysql/performance/limit.md"}');export{d as comp,c as data};
