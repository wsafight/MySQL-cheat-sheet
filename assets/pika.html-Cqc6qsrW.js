import{_ as e,c as l,b as a,o as s}from"./app--XYqrjBE.js";const t={};function r(d,i){return s(),l("div",null,i[0]||(i[0]=[a('<h1 id="类redis存储系统-pika" tabindex="-1"><a class="header-anchor" href="#类redis存储系统-pika"><span>类Redis存储系统: Pika</span></a></h1><p>Pika 是 360 开源的类 Redis 存储系统。主要解决的是用户使用 Redis 的内存大小超过 50G、80G 等等这样的情况，会遇到启动恢复时间长，一主多从代价大，硬件成本贵，缓冲区容易写满等问题。Pika 就是针对这些场景的一个解决方案。</p><p>Pika 底层采用了 rocksdb 作为存储引擎。数据库基于内存和文件，所以性能要比 Redis 低。但是 Pika 目标并不是取代redis, 而是 redis 的一个补充. 是在使用 redis 容量过大的场景下面的一个解决方案。</p><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><p>优点：</p><ul><li>节约成本，占用内存较小，写入数据达到 700 GB 后，占用内存在 7GB 左右</li><li>采用 snappy 压缩数据，数据压缩比较大，写入数据达到 700GB 后，占用磁盘约为 110 GB 左右</li><li>重新启动后恢复数据的过程很快，没有redis 将数据加载到内存的过程</li><li>多线程，不会像 Redis 一样由于某个耗时操作导致后面操作阻塞的现象</li><li>自带持久化</li><li>官方支持 Docker 部署</li></ul><p>缺点：</p><ul><li>严重依赖磁盘 IO 性能，注意不同实例写入同一块盘时的影响</li><li>lsm tree 普遍存在的 IO 放大问题</li><li>不支持 multi exec 的事务操作</li><li>list 相关操作性能比 Redis 差</li><li>compact 时较大的影响写入性能</li><li>极限性能下对 cpu 的压力较大</li></ul>',8)]))}const n=e(t,[["render",r],["__file","pika.html.vue"]]),c=JSON.parse('{"path":"/redis/other/pika.html","title":"类Redis存储系统: Pika","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}],"git":{"updatedTime":1718847432000,"contributors":[{"name":"jump-and-jump","email":"984292420@qq.com","commits":1}]},"filePathRelative":"redis/other/pika.md"}');export{n as comp,c as data};
